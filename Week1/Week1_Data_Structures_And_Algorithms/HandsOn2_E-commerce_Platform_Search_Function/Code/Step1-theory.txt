Big O Notation:
    Big O notation describes the time complexity of an algorithm, i.e., how the run time increases with input size:

Search Operation Scenarios:
- Best-case: Element is found immediately - O(1) (constant time)

- Average-case: Element is found after checking half the elements
    Linear search: O(n)
    Binary search: O(log n)

- Worst-case: Element is not found or is the last checked
    Linear search: O(n)
    Binary search: O(log n)


 Suitability
- Linear Search: Easy to implement, works on unsorted data, but slow for large datasets.

- Binary Search: Much faster (O(log n)), but needs data to be sorted. Since it's a logarithmic algorithm, the number of operations grows very slowly even as the input size increases. This effectively reduces the computational load on the system.


For e-commerce where speed is key, binary search is better if products can be sorted.
